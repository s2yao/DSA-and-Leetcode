def s(number):
    ret = 0

    pattern_counts = dict()

    for idx in range(len(number)):
        char = str(number[idx])
        wildcard_posn = 0
        for i in range(len(char)):
            combination = char[:i] + "_" + char[i+1:]
            pattern_counts[combination] = pattern_counts.get(combination, 0) + 1

    for keys in pattern_counts.values():
        ret += (keys * (keys - 1)) // 2

    return ret



def solution(number):
    pattern_counts = {}
    processed_str = set()
    offset = 0

    for idx in range(len(number)):
        curr_char = str(number[idx])
        if (curr_char in processed_str): 
            offset += len(curr_char)
        else:
            processed_str.add(curr_char)

        for i in range(len(curr_char)):
            combinations = curr_char[:i] + "_" + curr_char[i+1:]
            pattern_counts[combinations] = pattern_counts.get(combinations, 0) + 1
            # .get(target, default_val)
    
    ret = 0
    for value in pattern_counts.values():
        ret += (value * (value - 1)) // 2
    
    return ret - offset


def run_tests():
    test_cases = [
        ([1, 2], 1),  # Single digit case
        ([101, 201, 301, 401], 6),  # All 3-digit numbers differ in one digit
        ([12, 34, 56, 123, 234], 0),  # Mixed lengths, no valid pairs
        ([111, 111, 111], 0),  # Identical numbers, no valid pairs
        ([1, 3, 7, 9], 6),  # Single-digit numbers, all valid pairs
        ([12, 13, 22, 23, 123, 124, 223], 5),  # Mixed lengths with some valid pairs
        ([10**i for i in range(10)], 0),  # No valid pairs, increasing length
        ([101, 201, 301, 401, 501, 601, 701, 801, 901], 36),  # Large group of valid pairs
        ([123, 123, 124, 125], 3),  # Repeated numbers with some valid pairs
    ]

    for idx, (numbers, expected) in enumerate(test_cases):
        result = solution(numbers)
        if result == expected:
            print(f"Test case {idx + 1}: Passed")
        else:
            print(f"Test case {idx + 1}: Failed (Expected {expected}, Got {result})")

# Run tests
#run_tests()


numbers = [111, 111, 111]
print(solution(numbers))  # Output: 3